<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="CPU_THRESHOLD" elementType="Argument">
            <stringProp name="Argument.name">CPU_THRESHOLD</stringProp>
            <stringProp name="Argument.value">70</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIMEOUT_MINUTES" elementType="Argument">
            <stringProp name="Argument.name">TIMEOUT_MINUTES</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GROUP_SIZE" elementType="Argument">
            <stringProp name="Argument.name">GROUP_SIZE</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">250</intProp>
        <intProp name="ThreadGroup.ramp_time">2500</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set thread group params">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">def threadNumber = ctx.getThreadNum() + 1
vars.put(&quot;threadNumber&quot;, threadNumber.toString())

int groupSize = vars.get(&quot;GROUP_SIZE&quot;) as int

int chatNumber = ((threadNumber - 1) / groupSize).intValue() + 1
String chatId = &quot;cid&quot; + (chatNumber * groupSize)

vars.put(&quot;chatId&quot;, chatId.toString())
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="ws create connection">
          <boolProp name="TLS">false</boolProp>
          <stringProp name="server">127.0.0.1</stringProp>
          <stringProp name="port">9001</stringProp>
          <stringProp name="path"></stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
        </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.PingPongSampler guiclass="eu.luminis.jmeter.wssampler.PingPongSamplerGui" testclass="eu.luminis.jmeter.wssampler.PingPongSampler" testname="ws Ping/Pong">
          <stringProp name="type">PingPong</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
        </eu.luminis.jmeter.wssampler.PingPongSampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="ws user_create">
          <boolProp name="createNewConnection">false</boolProp>
          <boolProp name="TLS">false</boolProp>
          <stringProp name="server"></stringProp>
          <stringProp name="port">80</stringProp>
          <stringProp name="path"></stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <stringProp name="payloadType">Text</stringProp>
          <stringProp name="requestData">{&quot;request&quot;:{&quot;user_create&quot;:{&quot;login&quot;:&quot;test_${threadNumber}&quot;,&quot;password&quot;:&quot;test&quot;,&quot;device_id&quot;:&quot;${threadNumber}&quot;},&quot;id&quot;:&quot;create&quot;}}</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
          <boolProp name="loadDataFromFile">false</boolProp>
          <stringProp name="dataFile"></stringProp>
        </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ws http login">
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">9001</stringProp>
          <stringProp name="HTTPSampler.path">/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;login&quot;: &quot;test_${threadNumber}&quot;,&#xd;
    &quot;password&quot;: &quot;test&quot;,&#xd;
    &quot;device_id&quot;: &quot;${threadNumber}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">uid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs"> $.user._id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Scope.variable"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(uid${threadNumber},${uid})}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="ws connect">
          <boolProp name="createNewConnection">false</boolProp>
          <boolProp name="TLS">false</boolProp>
          <stringProp name="server"></stringProp>
          <stringProp name="port">80</stringProp>
          <stringProp name="path"></stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <stringProp name="payloadType">Text</stringProp>
          <stringProp name="requestData">{&quot;request&quot;:{&quot;connect&quot;:{&quot;token&quot;:&quot;${access_token}&quot;,&quot;device_id&quot;:&quot;${threadNumber}&quot;},&quot;id&quot;:&quot;connect&quot;}}</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
          <boolProp name="loadDataFromFile">false</boolProp>
          <stringProp name="dataFile"></stringProp>
        </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
          <stringProp name="IfController.condition">${__jexl3(${threadNumber} % ${GROUP_SIZE} == 0)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="ws conversation_create">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="payloadType">Text</stringProp>
            <stringProp name="requestData">{
    &quot;request&quot;: {
        &quot;conversation_create&quot;: {
            &quot;name&quot;: &quot;test_${threadNumber}&quot;,
            &quot;type&quot;: &quot;g&quot;,
            &quot;participants&quot;: ${__groovy(
    	int groupSize = vars.get(&quot;GROUP_SIZE&quot;) as int;
    	int threadNumber = vars.get(&quot;threadNumber&quot;) as int;
   	 def participants = [];
   	 for (int i = 1; i &lt; groupSize; i++) {
       	       def participantUid = props.get(&quot;uid&quot; + (threadNumber - i));
       	       if (participantUid != null) {
            	          participants.add(&quot;\&quot;&quot; + participantUid + &quot;\&quot;&quot;);
        	        }
     	}
    	return participants.toString();
	)}
        },
        &quot;id&quot;: &quot;conversation_create&quot;
    }
}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">cid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"> $.response.conversation._id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">${__setProperty(cid${threadNumber},${cid})}

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="debug viewer">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller">
          <stringProp name="WhileController.condition"></stringProp>
        </WhileController>
        <hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="ws send message">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="payloadType">Text</stringProp>
            <stringProp name="requestData">{
    &quot;message&quot;: {
        &quot;id&quot;: &quot;677c66271ecc681158e965cd1736206637858&quot;,
        &quot;body&quot;: &quot;ping${threadNumber}&quot;,
        &quot;cid&quot;: &quot;${__groovy(props.get(vars.get(&apos;chatId&apos;)))}&quot;
    }
}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller">
          <stringProp name="WhileController.condition"></stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set stop params">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
import java.lang.management.ManagementFactory
import java.lang.management.OperatingSystemMXBean
import java.io.BufferedReader
import java.io.InputStreamReader

def cpuThreshold = vars.get(&quot;CPU_THRESHOLD&quot;) as double 
def timeoutMinutes = vars.get(&quot;TIMEOUT_MINUTES&quot;) as int
def timeoutMillis = timeoutMinutes * 60 * 1000

def getCpuLoad() {
    def os = System.getProperty(&quot;os.name&quot;).toLowerCase()
    def cpuLoad = -1.0 

    if (os.contains(&quot;win&quot;)) {
        try {
            def process = Runtime.getRuntime().exec(&quot;powershell -Command Get-WmiObject Win32_Processor | Select-Object -ExpandProperty LoadPercentage&quot;)
            def reader = new BufferedReader(new InputStreamReader(process.getInputStream()))
            def line = reader.readLine() 
            cpuLoad = line ? line.trim().toDouble() : -1.0
        } catch (Exception e) {
            log.error(&quot;Failed to get CPU load on Windows using PowerShell: ${e.message}&quot;)
        }
    } else if (os.contains(&quot;nix&quot;) || os.contains(&quot;nux&quot;) || os.contains(&quot;mac&quot;)) {
        try {
            def process = Runtime.getRuntime().exec([&quot;top&quot;, &quot;-bn1&quot;, &quot;|&quot;, &quot;grep&quot;, &quot;&apos;Cpu(s)&apos;&quot;])
            def reader = new BufferedReader(new InputStreamReader(process.getInputStream()))
            def line = reader.readLine()
            if (line) {
                def match = line =~ /(\d+\.\d+)%id/
                if (match) {
                    def idleCpu = match[0][1].toDouble()
                    cpuLoad = 100 - idleCpu
                }
            }
        } catch (Exception e) {
            log.error(&quot;Failed to get CPU load on Linux/Mac: ${e.message}&quot;)
        }
    }
    return cpuLoad
}

def cpuLoad = getCpuLoad()
def currentTime = System.currentTimeMillis()

if (cpuLoad &gt; cpuThreshold) {
    def lastHighLoadTime = vars.getObject(&quot;lastHighLoadTime&quot;) ?: currentTime
    vars.putObject(&quot;lastHighLoadTime&quot;, lastHighLoadTime)

    if (currentTime - lastHighLoadTime &gt; timeoutMillis) {
        log.warn(&quot;CPU usage exceeded ${cpuThreshold}% for ${timeoutMinutes} minutes. Stopping test.&quot;)
        org.apache.jmeter.engine.StandardJMeterEngine engine = org.apache.jmeter.threads.JMeterContextService.getContext().getEngine()
        engine.stopTest()
    }
} else {
    vars.remove(&quot;lastHighLoadTime&quot;)
}

log.info(&quot;Current CPU Load: ${cpuLoad}%&quot;)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
